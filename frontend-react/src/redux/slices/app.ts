/* eslint-disable no-param-reassign */
/* eslint-disable implicit-arrow-linebreak */
/* eslint-disable @typescript-eslint/indent */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { login, register, fetchUsers } from '../../api/login';
import type { IUser } from '../../types/user';

export interface AppState {
  loginStatus: 'loggedIn' | 'loggedOut';
  loginLoading: boolean;
  user?: IUser;
  registerLoading: boolean;
  users?: IUser[];
  usersFetchLoading: boolean;
  connectedUsers: any;
}

const initialState: AppState = {
  loginStatus: 'loggedOut',
  loginLoading: false,
  user: undefined,
  registerLoading: false,
  users: [],
  usersFetchLoading: false,
  connectedUsers: {},
};

export const requestLoginAsync = createAsyncThunk('app/login', login);
export const requestRegisterAsync = createAsyncThunk('app/register', register);
export const fetchUsersAsync = createAsyncThunk('app/users/fetch', fetchUsers);

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => 0);

export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setConnected: (state, action: PayloadAction<{ timestamp: any; id: any }>) => {
      state.connectedUsers[action.payload.id] = action.payload.timestamp;
    },
    clearState: (state) => {
      state.user = undefined;
      state.users = [];
      state.connectedUsers = {};
    },
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(requestLoginAsync.pending, (state) => {
        state.loginLoading = true;
      })
      .addCase(requestLoginAsync.fulfilled, (state, action) => {
        state.loginLoading = false;
        console.log(action);
      })
      .addCase(requestLoginAsync.rejected, (state, action) => {
        state.loginLoading = false;
        console.log(action);
      })

      // Handle registration
      .addCase(requestRegisterAsync.pending, (state) => {
        state.registerLoading = true;
      })
      .addCase(requestRegisterAsync.fulfilled, (state, action) => {
        state.registerLoading = false;
        console.log(action);
      })
      .addCase(requestRegisterAsync.rejected, (state, action) => {
        state.registerLoading = false;
        console.log(action);
      })

      // Handle all users fetch
      .addCase(fetchUsersAsync.pending, (state) => {
        state.usersFetchLoading = true;
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        state.usersFetchLoading = false;
        state.users = action?.payload?.users || [];
        console.log(action);
      })
      .addCase(fetchUsersAsync.rejected, (state, action) => {
        state.usersFetchLoading = false;
        console.log(action);
      });
  },
});

export const { setConnected, clearState } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export const { reducer } = appSlice;

export default appSlice;
