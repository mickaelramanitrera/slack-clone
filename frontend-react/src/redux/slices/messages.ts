/* eslint-disable no-param-reassign */
/* eslint-disable implicit-arrow-linebreak */
/* eslint-disable @typescript-eslint/indent */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import type { IMessage } from '../../types/message';
import { createMessage, fetchMessages } from '../../api/message';

export interface ChannelState {
  messages: IMessage[];
  loading: boolean;
}

const initialState: ChannelState = {
  loading: false,
  messages: [],
};

export const createMessageThunk = createAsyncThunk('messages/create', createMessage);
export const fetchMessagesThunk = createAsyncThunk('messages/fetch', fetchMessages);

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => 0);

export const messageSlice = createSlice({
  name: 'messages',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearState: (state) => {
      state.messages = [];
    },
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createMessageThunk.pending, (state) => {
        state.loading = true;
      })
      .addCase(createMessageThunk.fulfilled, (state, action) => {
        state.loading = false;
        console.log(action);
        // state.messages = action?.payload?.channels || [];
      })
      .addCase(createMessageThunk.rejected, (state, action) => {
        state.loading = false;
        console.log(action);
      })

      .addCase(fetchMessagesThunk.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchMessagesThunk.fulfilled, (state, action) => {
        state.loading = false;
        state.messages = action?.payload?.messages || [];
        console.log(action);
        // state.messages = action?.payload?.channels || [];
      })
      .addCase(fetchMessagesThunk.rejected, (state, action) => {
        state.loading = false;
        console.log(action);
      });
  },
});

export const { clearState } = messageSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export const { reducer } = messageSlice;

export default messageSlice;
